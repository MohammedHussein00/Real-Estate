@model IEnumerable<Real_State.Models.AllAdminsModel>
@{
    Layout = "_AdminLayout.cshtml";
} 
    <div class="container">
        <div class="header">
            <h1>Admin Dashboard</h1>
            <div class="filters">
            </div>
        </div>

        <div class="table-container">
            <table>
                <thead>
                    <tr>
                        <th></th>
                        <th>Name</th>
                        <th>Email</th>
                        <th>Phone</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody id="adminTable">
                @foreach (var admin in Model)
                {
                    <tr>
                        <td>
                            <img src="@(!string.IsNullOrEmpty(admin.ImageUrl) ? admin.ImageUrl : "/Static Images/profile1.png")"
                                 alt="Profile Picture"
                                 style="width: 50px; height: 50px; border-radius: 50%;" />
                        </td>
                        <td>@admin.Name</td>
                        <td>@admin.Email</td>
                        <td>@admin.Phone</td>
                        <td class="action-buttons">
                            <button class="btn btn-edit">...</button>
   
                        </td>
                    </tr>
                }
            </tbody>
            </table>
        </div>
    </div>

    <script>
        // Initial admin data
        const admins = @Model

        // Function to render admin rows
        function renderAdmins(data) {
            const adminTable = document.getElementById("adminTable");
            adminTable.innerHTML = data.map(admin => `
                <tr>
                    <td>${admin.name}</td>
                    <td>${admin.email}</td>
                    <td>${admin.role}</td>
                    <td>${admin.status}</td>
                    <td class="action-buttons">
                        <button class="btn btn-edit" onclick="editAdmin('${admin.name}')">Edit</button>
                        <button class="btn btn-delete" onclick="deleteAdmin('${admin.name}')">Delete</button>
                        <button class="btn btn-info" onclick="viewDetails('${admin.name}', '${admin.email}', '${admin.role}', '${admin.status}')">Details</button>
                    </td>
                </tr>
            `).join('');
        }

        // Filter function
        function filterAdmins() {
            const nameFilter = document.getElementById("searchName").value.toLowerCase();
            const roleFilter = document.getElementById("roleFilter").value;
            const statusFilter = document.getElementById("statusFilter").value;

            const filteredAdmins = admins.filter(admin => 
                (admin.name.toLowerCase().includes(nameFilter)) &&
                (roleFilter === "" || admin.role === roleFilter) &&
                (statusFilter === "" || admin.status === statusFilter)
            );

            renderAdmins(filteredAdmins);
        }

        // Placeholder actions
        function editAdmin(name) {
            alert(`Edit admin: ${name}`);
        }

        function deleteAdmin(name) {
            alert(`Delete admin: ${name}`);
        }

        function viewDetails(name, email, role, status) {
            alert(`Details:\nName: ${name}\nEmail: ${email}\nRole: ${role}\nStatus: ${status}`);
        }

        // Initial render
        renderAdmins(admins);
    </script>


        <style>
   

        .container {
            max-width: 1200px;
            margin: 20px auto;
            background: white;
            padding: 20px;
            border-radius: 8px;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        }

        .header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 20px;
        }

        .header h1 {
            margin: 0;
            color: #333;
        }

        .filters {
            display: flex;
            gap: 15px;
        }

        .filters input, .filters select {
            padding: 8px;
            font-size: 14px;
            border: 1px solid #ccc;
            border-radius: 5px;
        }

        .table-container {
            margin-top: 20px;
            overflow-x: auto;
        }

        table {
            width: 100%;
            border-collapse: collapse;
            margin: 0;
        }

        th, td {
            text-align: left;
            padding: 10px;
            border: 1px solid #ddd;
        }

        th {
        background-color: #02999f;
            color: white;
        }

        tr:nth-child(even) {
            background-color: #f9f9f9;
        }

        .action-buttons {
            display: flex;
            gap: 10px;
        }

        .btn {
            padding: 5px 10px;
            font-size: 14px;
            color: white;
            border: none;
            border-radius: 5px;
            cursor: pointer;
        }

        .btn-edit {
            background-color: #28a745;
        }

        .btn-delete {
            background-color: #dc3545;
        }

        .btn-info {
            background-color: #007bff;
        }

        .btn-edit:hover {
            background-color: #218838;
        }

        .btn-delete:hover {
            background-color: #c82333;
        }

        .btn-info:hover {
            background-color: #0056b3;
        }
    </style>