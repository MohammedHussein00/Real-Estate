@model Real_State.Models.RegisterViewModel;

@{
    ViewData["Title"] = "Register";
    Layout = "_layout.cshtml";
}

<div class="d-flex row flex-row-reverse">
    <div class="sideLeft col-lg-7 col-md-4 d-none d-sm-flex justify-content-center">
        <img src="~/Static Images/sign.jpg" alt="Login Image">
    </div>

    <div class="col-lg-5 col-md-8 col-sm-12 d-flex flex-column align-items-center justify-content-center">
        <div class="d-flex flex-column align-items-center" style="width: 100%; height: 86%; justify-content: center;">
            <div class="mb-2">
                <img src="~/Static Images/logo-with-name.png" alt="Company Logo" />
            </div>
            <h4 class="col-lg-6 col-md-8 col-sm-8">Register</h4>

            <form asp-action="Register" asp-controller="Auth" method="post" id="registerForm" class="col-lg-6 col-md-8 col-sm-8">
                <div class="input-group">
                    <i class="bi bi-person"></i>
                    <input id="Name" type="text" placeholder="Name" class="form-control" asp-for="Name" required />
                </div>
                <div class="mb-3">
                    <span id="nameErrorRequired" class="text-danger"></span>
                    <span id="nameError" class="text-danger"></span>
                </div>

                <div class="input-group">
                    <i class="bi bi-envelope"></i>
                    <input id="Email" type="email" placeholder="Email" class="form-control" asp-for="Email" required />
                </div>
                <div class="mb-3">
                    <span id="emailErrorRequired" class="text-danger"></span>
                    <span id="emailError" class="text-danger"></span>
                </div>

                <div class="input-group">
                    <svg class="svg-inline--fa fa-lock" aria-hidden="true" focusable="false" data-prefix="fas" data-icon="lock" role="img" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 448 512" data-fa-i2svg="">
                        <path fill="currentColor" d="M144 144v48H304V144c0-44.2-35.8-80-80-80s-80 35.8-80 80zM80 192V144C80 64.5 144.5 0 224 0s144 64.5 144 144v48h16c35.3 0 64 28.7 64 64V448c0 35.3-28.7 64-64 64H64c-35.3 0-64-28.7-64-64V256c0-35.3 28.7-64 64-64H80z"></path>
                    </svg>                   
                    <input id="Password" type="password" placeholder="Password" class="form-control" asp-for="Password" required />
                    <i class="bi bi-eye" style="cursor: pointer;left:90%;" onclick="togglePasswordVisibility()"></i>
                </div>
                <div class="mb-3">
                    <span id="passwordErrorRequired" class="text-danger"></span>
                    <span id="passwordError" class="text-danger"></span>
                </div>


                <div class="input-group">
                    <i class="bi bi-telephone-fill"></i>                
                    <input id="Phone" type="text" placeholder="Phone" class="form-control" asp-for="Phone" required onkeypress="allowOnlyNumbers(event)" oninput="formatPhoneNumber(event)" />
                </div>
                <div class="mb-5">
                    <span id="phoneErrorRequired" class="text-danger"></span>
                    <span id="phoneError" class="text-danger"></span>
                </div>

                <div class="mb-3">
                    <span  class="text-danger">@Model.Message</span>
                </div>


                <button onclick="submitForm()" class="registerButton">Register Now</button>
            </form>

            <p>
                Already have an account?
                <a asp-controller="Auth" asp-action="Register" style="color: #0198a0;">Login</a>
            </p>


        </div>

        <div style="width: 100%; background-color: #e3e3e3; height: 14%; padding: 20px;" class="d-flex justify-content-center">
            <div class="col-lg-6 col-md-8 col-sm-12">
                <div class="d-flex justify-content-between align-items-center">
                    <span style="font-weight: 500;">Real State</span>
          
                </div>
                <div class="text-center">
                    All rights reserved | Real Estate 2024 ©
                </div>
            </div>
        </div>
    </div>
</div>

<script>
    function togglePasswordVisibility() {
        const passwordInput = document.getElementById("Password");
        passwordInput.type = passwordInput.type === 'password' ? 'text' : 'password';
    }

    function validateField(input, requiredErrorId, formatErrorId, requiredMessage, formatMessage, minLength = 0, isEmail = false, isPassword = false, exactLength = 0) {
        const requiredErrorElement = document.getElementById(requiredErrorId);
        const formatErrorElement = document.getElementById(formatErrorId);
        requiredErrorElement.textContent = "";
        formatErrorElement.textContent = "";

        if (input.value.length === 0) {
            input.style.borderColor = "red";
            requiredErrorElement.textContent = requiredMessage;
        } else if (isEmail && !input.checkValidity()) {
            input.style.borderColor = "red";
            formatErrorElement.textContent = formatMessage;
        } else if (isPassword && !validatePassword(input.value)) {
            input.style.borderColor = "red";
            formatErrorElement.textContent = formatMessage;
        } else if (exactLength > 0 && input.value.length !== exactLength) {
            input.style.borderColor = "red";
            formatErrorElement.textContent = formatMessage;
        } else if (minLength > 0 && input.value.length < minLength) {
            input.style.borderColor = "red";
            formatErrorElement.textContent = formatMessage;
        } else {
            input.style.borderColor = "#0198a0";
        }
    }

    function validatePassword(password) {
        const passwordPattern = /^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[!@@#$%^&*()\-_+=<>?/.,:;'"[\]{}|\\]).{8,}$/;
        return passwordPattern.test(password);
    }

    // Input event listeners
    const fields = [
        { id: "Name", requiredErrorId: "nameErrorRequired", formatErrorId: "nameError", requiredMessage: "Name is required.", formatMessage: "Name must be at least 3 characters long.", minLength: 3 },
        { id: "Email", requiredErrorId: "emailErrorRequired", formatErrorId: "emailError", requiredMessage: "Email is required.", formatMessage: "Must be a valid email address.", isEmail: true },
        { id: "Password", requiredErrorId: "passwordErrorRequired", formatErrorId: "passwordError", requiredMessage: "Password is required.", formatMessage: "Password must be valid with at least 8 characters, uppercase, lowercase, number, and special character.", isPassword: true },
        { id: "Phone", requiredErrorId: "phoneErrorRequired", formatErrorId: "phoneError", requiredMessage: "Phone is required.", formatMessage: "Phone must be 11 digits long.", exactLength: 11 }
    ];

    fields.forEach(field => {
        const input = document.getElementById(field.id);
        input.addEventListener("input", function () {
            validateField(this, field.requiredErrorId, field.formatErrorId, field.requiredMessage, field.formatMessage, field.minLength || 0, field.isEmail || false, field.isPassword || false, field.exactLength || 0);
        });
        input.addEventListener("blur", function () {
            validateField(this, field.requiredErrorId, field.formatErrorId, field.requiredMessage, field.formatMessage, field.minLength || 0, field.isEmail || false, field.isPassword || false, field.exactLength || 0);
        });
    });

    document.getElementById("registerForm").addEventListener("submit", function (event) {
        let isValid = true;

        fields.forEach(field => {
            const input = document.getElementById(field.id);
            validateField(input, field.requiredErrorId, field.formatErrorId, field.requiredMessage, field.formatMessage, field.minLength || 0, field.isEmail || false, field.isPassword || false, field.exactLength || 0);
            if (input.style.borderColor === "red") {
                isValid = false;
            }
        });

        if (!isValid) {
            event.preventDefault();
        }
    });

    function allowOnlyNumbers(event) {
        const key = String.fromCharCode(event.keyCode || event.which);
        if (!/[0-9]/.test(key)) {
            event.preventDefault();
        }
    }

    function formatPhoneNumber(event) {
        const input = event.target;
        let value = input.value.replace(/\D/g, '');
        input.value = value;
    }
</script>
