@model Real_State.Controllers.PropertySearchModel
@{
    Layout = "_LAYOUT.cshtml";
    var count = Model.AgentModels.Count();

}

<form method="get" action="@Url.Action("PropertyList", "HomePage")" id="locationSearchForm"
      style="background-image: linear-gradient(135deg, #0099a1, rgba(62, 42, 211, 0.8)), url(https://luxus.wplistingthemes.com/wp-content/uploads/2021/06/title-bg-1.webp); height: 200px; display: flex;">
    
    <div class="form-group d-flex align-items-center" style="margin: auto; background: white; padding: 10px; justify-content: space-between; width: 75%; border-radius: 5px;">
        
        <!-- Location Input (Hidden) -->
        <input type="text" name="location" id="location" hidden class="form-control" value="@Model.SelectedLocation" placeholder="Search by location..." readonly>

        <!-- Purpose Radio Buttons using Razor's RadioButtonFor -->
        <!-- Optional: Location search input -->
        <div class="wrapper w-50">
            <div class="chips_input w-100" data-limit="15">
                <div class="inner">
                    <input type="text" id="myinput" placeholder="Search by location" name="myinput">
                </div>
            </div>
        </div>
        <div class="btn-group d-flex align-items-center" style="gap: 5px;background: #e7e7e7;padding: 7px;border: 1px solid #c9c4c4;" role="group" aria-label="Basic radio toggle button group">
            @Html.RadioButtonFor(m => m.Purpose, "All", new { @class = "btn-check", id = "btnradio3", autocomplete = "off" })
            <label class="btn btn-outline-primary" for="btnradio3" style="border: none; box-shadow: none; border-radius: 5px;">All</label>

            @Html.RadioButtonFor(m => m.Purpose, "Sale", new { @class = "btn-check", id = "btnradio1", autocomplete = "off" })
            <label class="btn btn-outline-primary" for="btnradio1" style=" border: none; box-shadow: none; border-radius: 5px;">For Buy</label>
            
            @Html.RadioButtonFor(m => m.Purpose, "Rent", new { @class = "btn-check", id = "btnradio2", autocomplete = "off" })
            <label class="btn btn-outline-primary" for="btnradio2" style=" border: none; box-shadow: none; border-radius: 5px;">For Rent</label>
            
        </div>

        <input type="text" id="sortInput" asp-for="Sort" hidden>
        <input type="text"  id="type-value" asp-for="Type" hidden >
        <input type="text"  id="min-price-form" value="40000" asp-for="MinPrice"  hidden>
        <input type="text"  id="max-price-form" value="1000000" asp-for="MaxPrice" hidden >

        <input type="text"  id="min-space-form" asp-for="MinSpace" hidden >
        <input type="text"  id="max-space-form" asp-for="MaxSpace" hidden >

        <input type="number"  id="bedrooms" asp-for="Bedrooms" hidden >
        <input type="number" id="bathrooms" asp-for="Bathrooms" hidden>

        <button type="submit" class="search" style="border: none;padding: 14px 45px;background: var(--color-1);font-weight: 600;color: white;border-radius: 5px;" routerLink="/search">
            Search</button>
        
    </div>
</form>


<div class="container">
    <div class="row mt-4">

        <div class="row" style="
    background: white;
    padding: 20px;
">

            <div class="col-lg-9 col-md-12" >
                <div>
                    <div class="d-flex w-100" style="justify-content:space-between;">
                        <div class="filter-category justify-content-between mb-3">
                            <h4>Properties for sale in Egypt</h4>
                            <div class="filter-category justify-content-between w-50">
                                <div class="dropdown-wrapper w-50">
                                </div>
                            </div>
                        </div>
                            <!--  Type Dropdown -->

                            <div class="dropdown">
                                <!-- Hidden checkbox toggle for managing dropdown visibility -->
                                <input type="checkbox" class="dropdown__switch-finishing" id="finishing-type-switch" hidden />

                                <!-- Dropdown trigger and filter label for Finishing Type -->
                                <label for="finishing-type-switch" class="dropdown__options-filter-finishing">
                                    <ul class="dropdown__filter-finishing" role="listbox" tabindex="-1">
                                        <li class="dropdown__filter-selected-finishing" aria-selected="true">
                                        @Model.Sort
                                    </li>
                                        <li>
                                            <ul class="dropdown__select-finishing">
                                                <!-- Options will be added dynamically by JavaScript -->
                                            </ul>
                                        </li>
                                    </ul>
                                </label>
                            </div>

                    </div>
                </div>

                @* <<<<<<<<<<<<<<<<<<<<<<<<< properties part start >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> *@
            @for (int i = 0; i < count; i++)
            {
                var property = Model.Properties[i];
                    var savedStatus = Model.PropertiesSavedStatus?.FirstOrDefault(p => p.Id == property.Id)?.Status ?? false;
              <a href="@Url.Action("propertyDetails", "HomePage", new { id = property.Id })" style="text-decoration: none; color: inherit;">

                <div class="card" style="display: flex;flex-direction: row;padding: 0">
                        <div style="position:relative">
                    <img src="@property.MainImagePath" class="card-img-top" alt="Property Image" style="max-height: 300px;" />
                     <!-- icon to save property -->

                        <i class="bi @(savedStatus ? "bi-heart-fill" : "bi-heart") save-icon"
                               style="bottom: 3px;cursor: pointer;left: 11px;color: white;position: absolute;font-size: 20px;"
                           data-property-id="@property.Id"
                           id="icon-@property.Id"
                           data-saved="@(savedStatus ? "true" : "false")"
                        onclick="event.preventDefault();"
                        >
                        </i>
                    </div>
                        <div class="card-body" style="justify-content: space-between;display: flex;flex-direction: column;">

                                <h5 class="card-title" style="color:@(property.IsSold ? "red" : "")">
                                    @(property.IsSold ? "Sold" : "Active")
                                </h5>
                        <h5 class="card-title">
                            <small style="font-size: 0.7em">EGP</small> @property.Price
                        </h5>
                        <div class="card-text">
                            <p class="type">@property.Type</p>

                                <span class="icon-text">

                                    <svg class="room" xmlns="http://www.w3.org/2000/svg" height="24px"
                                             viewBox="0 -960 960 960" width="24px" fill="#e8eaed">
                                            <path d="M80-200v-240q0-27 11-49t29-39v-112q0-50 35-85t85-35h160q23 0 43 8.5t37 23.5q17-15 37-23.5t43-8.5h160q50 0 85 35t35 85v112q18 17 29 39t11 49v240h-80v-80H160v80H80Zm440-360h240v-80q0-17-11.5-28.5T720-680H560q-17 0-28.5 11.5T520-640v80Zm-320 0h240v-80q0-17-11.5-28.5T400-680H240q-17 0-28.5 11.5T200-640v80Zm-40 200h640v-80q0-17-11.5-28.5T760-480H200q-17 0-28.5 11.5T160-440v80Zm640 0H160h640Z"></path>
                                        </svg>

                                    <smal class="number">@property.Bedrooms</smal>
                                    </span>
                                    <span class="icon-text">

                                        <svg class="room" xmlns="http://www.w3.org/2000/svg" height="24px"
                                             viewBox="0 -960 960 960" width="24px" fill="#e8eaed">
                                            <path d="M280-600q-33 0-56.5-23.5T200-680q0-33 23.5-56.5T280-760q33 0 56.5 23.5T360-680q0 33-23.5 56.5T280-600ZM200-80q-17 0-28.5-11.5T160-120q-33 0-56.5-23.5T80-200v-240h120v-30q0-38 26-64t64-26q20 0 37 8t31 22l56 62q8 8 15.5 15t16.5 13h274v-326q0-14-10-24t-24-10q-6 0-11.5 2.5T664-790l-50 50q5 17 2 33.5T604-676L494-788q14-9 30-11.5t32 3.5l50-50q16-16 36.5-25t43.5-9q48 0 81 33t33 81v326h80v240q0 33-23.5 56.5T800-120q0 17-11.5 28.5T760-80H200Zm-40-120h640v-160H160v160Zm0 0h640-640Z"></path>
                                        </svg>

                                    <small class="number">@property.Bathrooms</small>
                                </span>
                            
                            <span class="icon-text">
                                <p class="type">Area</p>: <p class="number">@property.Space </p> sqft
                            </span>
                        </div>
                                <p  class="text-description">@property.Description</p>
                                                        <div class="card-text">
                            <svg xmlns="http://www.w3.org/2000/svg" height="24px" viewBox="0 -960 960 960" width="24px"
                                 fill="#e8eaed">
                                <path d="M480-480q33 0 56.5-23.5T560-560q0-33-23.5-56.5T480-640q-33 0-56.5 23.5T400-560q0 33 23.5 56.5T480-480Zm0 294q122-112 181-203.5T720-552q0-109-69.5-178.5T480-800q-101 0-170.5 69.5T240-552q0 71 59 162.5T480-186Zm0 106Q319-217 239.5-334.5T160-552q0-150 96.5-239T480-880q127 0 223.5 89T800-552q0 100-79.5 217.5T480-80Zm0-480Z"></path>
                            </svg>
                            <p class="location-title">@property.Location </p>
                        </div>

                        <div class="d-flex justify-content-between align-items-center">
                            <div>
                                <!-- Button to Book a Viewing -->
                                <a href="javascript:void(0);" 
                                   onclick="handleBooking(@(property.IsSold.ToString().ToLower()), '/HomePage/BookAppointment/@property.Id/View')" 
                                   style="text-decoration: none;">
                                    <button type="button" class="contact-btn btn btn-primary pr-3" 
                                            style="background-color:var(--color-1); border-color:var(--color-1);">
                                        <i class="bi bi-bookmark-plus"></i> Book a Viewing
                                    </button>
                                </a>

                                <!-- Button to Book to Buy -->
                                <a href="javascript:void(0);" 
                                   onclick="handleBooking(@(property.IsSold.ToString().ToLower()), '@Url.Action("BookAppointment", "HomePage", new { propertyId = property.Id, appointmentType = "Buy" })')" 
                                   style="text-decoration: none;">
                                    <button type="button" class="contact-btn btn btn-primary pr-3" 
                                            style="background-color:var(--color-1); border-color:var(--color-1);">
                                        <i class="bi bi-bookmark-check-fill"></i> Book to Buy
                                    </button>
                                </a>
                            </div>

                            <script>
                                // JavaScript function to handle booking logic
                                function handleBooking(isSold, url) {
                                    if (isSold) {
                                        // Display an alert if the property is already sold
                                        alert("This property is sold and cannot be booked.");
                                    } else {
                                        // Navigate to the provided URL
                                        window.location.href = url;
                                    }
                                }
                            </script>


  
                        </div>
                    </div>
                </div>
              </a>
            }

                @* <<<<<<<<<<<<<<<<<<<<<<<<< properties part end >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> *@

            </div>


            @* <<<<<<<<<<<<<<<< start right part of filtering >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> *@
            <div class="col-lg-3 col-md-2 mb-4">
                 @* price rang *@
                <!-- Price Range -->
                    <div class="wrapper">
                        <header>
                            <h2>Price Range</h2>
                            <p>Use slider or enter min and max price</p>
                        </header>
                        <div class="price-input">
                            <div class="field">
                                <span>Min</span>
                                <input type="number" class="input-min" value="@Model.MinPrice" asp-for="MinPrice" id="min-price">
                            </div>
                            <div class="separator">-</div>
                            <div class="field">
                                <span>Max</span>
                                <input type="number" class="input-max" value="@Model.MaxPrice" asp-for="MaxPrice" id="max-price">
                            </div>
                        </div>
                        <div class="slider">
                            <div class="progress"></div>
                        </div>
                        <div class="range-input">
                            <input type="range" class="range-min" min="40000" max="1000000" value="@Model.MinPrice" step="1000" id="min-range">
                            <input type="range" class="range-max" min="40000" max="1000000" value="@Model.MaxPrice" step="1000" id="max-range">
                        </div>
                    </div>

                    <br />
                    <!-- Space Range Wrapper -->
                    <div class="wrapper space-wrapper">
                        <header>
                            <h2>Space Range</h2>
                            <p>Use slider or enter min and max space (in sq. meters)</p>
                        </header>
                        <div class="space-input">
                            <div class="field">
                                <span>Min</span>
                                <input type="number" class="input-min-space" value="@Model.MinSpace" asp-for="MinSpace" id="min-space-input">
                            </div>
                            <div class="separator">-</div>
                            <div class="field">
                                <span>Max</span>
                                <input type="number" class="input-max-space" value="@Model.MaxSpace" asp-for="MaxSpace" id="max-space-input">
                            </div>
                        </div>
                        <div class="slider-space">
                            <div class="progress-space"></div>
                        </div>
                        <div class="range-input-space">
                            <input type="range" class="range-min-space" min="40" max="3000" value="@Model.MinSpace" step="1" id="min-space-range">
                            <input type="range" class="range-max-space" min="40" max="3000" value="@Model.MaxSpace" step="1" id="max-space-range">
                        </div>
                    </div>
                    <br />

                    <div class="space-input">
                        <div class="field">
                                <span>Beds</span>

                            <input type="number" class="bedrooms" placeholder="Bedrooms" asp-for="Bedrooms" id="beds">
                        </div>
                        <div class="separator">-</div>
                        <div class="field">
                            <span>Baths</span>

                        <input type="number" class="bathrooms" placeholder="Bathrooms" asp-for="Bathrooms" id="baths">
                        </div>
                    </div>
                <br />





                <br />

                <div class="input-group">
                    <!-- Property Type Dropdown -->
                    <label>Property Type</label>
                    <div class="dropdown" style="width: 100%;">
                        <!-- Hidden checkbox toggle for managing dropdown visibility -->
                        <input type="checkbox" class="dropdown__switch-type" id="property-type-switch" hidden />

                        <!-- Dropdown trigger and filter label for Property Type -->
                        <label for="property-type-switch" class="dropdown__options-filter-type">
                            <ul class="dropdown__filter-type" role="listbox" tabindex="-1">
                                <li class="dropdown__filter-selected-type" aria-selected="true">
                                    @Model.Type
                                </li>
                                <li>
                                    <ul class="dropdown__select-type">
                                        <!-- Options will be added dynamically by JavaScript -->
                                    </ul>
                                </li>
                            </ul>
                        </label>
                    </div>
                </div>

                    <button onclick="submitForm()" class="search" style="border: none;padding: 14px 45px;background: var(--color-1);font-weight: 600;color: white;border-radius: 5px;" >Apply Filteration</button>



            </div>
            @* <<<<<<<<<<<<<<<< end right part of filtering >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> *@
        </div>
    </div>
</div>


@* <<<<<<<<<<<<<<<<<<<<<<<<< pagnition part start >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> *@

<div class="col-12 d-flex justify-content-center">
    <nav aria-label="Property pagination">
        <ul class="pagination">
            <!-- First Page Link -->
            <li class="page-item @(Model.CurrentPage == 1 ? "disabled" : "")">
                <a class="page-link" href="?page=1&location=@Model.SelectedLocation&purpose=@Model.Purpose&Sort=@Model.Sort&type=@Model.Type&minPrice=@Model.MinPrice&maxPrice=@Model.MaxPrice&minSpace=@Model.MinSpace&maxSpace=@Model.MaxSpace&bedrooms=@Model.Bedrooms&bathrooms=@Model.Bathrooms" tabindex="-1">First</a>
            </li>

            <!-- Previous Page Link -->
            <li class="page-item @(Model.CurrentPage == 1 ? "disabled" : "")">
                <a class="page-link" href="?page=@(Model.CurrentPage - 1)&location=@Model.SelectedLocation&purpose=@Model.Purpose&Sort=@Model.Sort&type=@Model.Type&minPrice=@Model.MinPrice&maxPrice=@Model.MaxPrice&minSpace=@Model.MinSpace&maxSpace=@Model.MaxSpace&bedrooms=@Model.Bedrooms&bathrooms=@Model.Bathrooms">Previous</a>
            </li>

            <!-- Page Numbers -->
            @for (int i = 1; i <= Model.TotalPages; i++)
            {
                <li class="page-item @(Model.CurrentPage == i ? "active" : "")">
                    <a class="page-link" href="?page=@i&location=@Model.SelectedLocation&purpose=@Model.Purpose&Sort=@Model.Sort&type=@Model.Type&minPrice=@Model.MinPrice&maxPrice=@Model.MaxPrice&minSpace=@Model.MinSpace&maxSpace=@Model.MaxSpace&bedrooms=@Model.Bedrooms&bathrooms=@Model.Bathrooms">@i</a>
                </li>
            }

            <!-- Next Page Link -->
            <li class="page-item @(Model.CurrentPage == Model.TotalPages ? "disabled" : "")">
                <a class="page-link" href="?page=@(Model.CurrentPage + 1)&location=@Model.SelectedLocation&purpose=@Model.Purpose&Sort=@Model.Sort&type=@Model.Type&minPrice=@Model.MinPrice&maxPrice=@Model.MaxPrice&minSpace=@Model.MinSpace&maxSpace=@Model.MaxSpace&bedrooms=@Model.Bedrooms&bathrooms=@Model.Bathrooms">Next</a>
            </li>

            <!-- Last Page Link -->
            <li class="page-item @(Model.CurrentPage == Model.TotalPages ? "disabled" : "")">
                <a class="page-link" href="?page=@Model.TotalPages&location=@Model.SelectedLocation&purpose=@Model.Purpose&Sort=@Model.Sort&type=@Model.Type&minPrice=@Model.MinPrice&maxPrice=@Model.MaxPrice&minSpace=@Model.MinSpace&maxSpace=@Model.MaxSpace&bedrooms=@Model.Bedrooms&bathrooms=@Model.Bathrooms">Last</a>
            </li>
        </ul>
    </nav>
</div>
@* <<<<<<<<<<<<<<<<<<<<<<<<< pagnition part end >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> *@

 <script>
     const bedrooms = document.getElementById('bedrooms');
const beds = document.getElementById('beds');
const baths = document.getElementById('baths');
const bathrooms = document.getElementById('bathrooms');

    beds.addEventListener('input', function () {
        bedrooms.value = beds.value;
    });
    baths.addEventListener('input', function () {
        bathrooms.value = baths.value;
        console.log(bathrooms.value)
    });
    document.querySelectorAll('.contact-btn').forEach(button => {
        button.addEventListener('click', function () {
            // You can add custom behavior here when the button is clicked
            var modalId = this.getAttribute('data-bs-target');
            var modal = new bootstrap.Modal(document.querySelector(modalId));
            modal.show();
        });
    });
</script>


 <script src="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/js/all.min.js"></script>

<script>
    document.addEventListener("DOMContentLoaded", function () {
        const chipContainer = document.querySelector(".chips_input .inner");
        const inputField = document.getElementById("myinput");
        const chipLimit = parseInt(document.querySelector(".chips_input").getAttribute("data-limit"), 10);
        const chipAddition = '<button aria-label="remove this chip"><i class="bi bi-x-circle"></i></button>';
        const chipList = [];  // Array to store chip values
        const locationInput = document.getElementById("location");

        updateLimiter();

        // Focus on input when clicking container
        chipContainer.addEventListener("click", () => {
            inputField.focus();
        });

        // Handle keydown events for Enter, Tab, and comma
        inputField.addEventListener("keydown", (e) => {
            if (["Enter", "Tab", ","].includes(e.key)) {
                e.preventDefault();
                let value = inputField.value.trim();

                // Remove trailing comma if it's the key pressed
                if (e.key === ",") {
                    value = value.slice(0, -1);
                }

                // Check if value is valid, unique, and within limit
                if (value && !hasDuplicateChip(value) && getChipCount() < chipLimit) {
                    makeChip(value);
                    inputField.value = "";
                    updateLocationInput(); // Update hidden input
                    document.getElementById('locationSearchForm').submit();
                }
            } else if (e.key === "Backspace" && inputField.value.length === 0) {
                removeLastChip();
                updateLimiter();
            }
        });

        // Handle removing chips on button click
        chipContainer.addEventListener("click", (e) => {
            if (e.target.closest("button")) {
                const chipElement = e.target.closest(".chip");
                const chipValue = chipElement.textContent.trim(); // Remove the "remove" button text
                chipElement.remove();
                updateChipList(chipValue, false); // Remove from chip list

                updateLimiter();
                updateLocationInput(); // Update hidden input

                document.getElementById('locationSearchForm').submit();
            }
        });

        // Create a new chip
        function makeChip(text) {
            const chip = document.createElement("span");
            chip.classList.add("chip");
            chip.innerHTML = `${escapeHtml(text)}${chipAddition}`;
            chipContainer.insertBefore(chip, inputField);
            updateChipList(text, true); // Add to chip list
            updateLimiter();
        }

        // Count the chips
        function getChipCount() {
            return chipContainer.querySelectorAll(".chip").length;
        }

        // Check for duplicate chips
        function hasDuplicateChip(value) {
            const chips = chipContainer.querySelectorAll(".chip");
            return Array.from(chips).some(chip => chip.textContent.trim() === value.trim());
        }

        // Remove the last chip
        function removeLastChip() {
            const lastChip = chipContainer.querySelector(".chip:last-of-type");
            if (lastChip) {
                const chipValue = lastChip.textContent.trim().slice(0, -1); // Get chip value without remove button
                lastChip.remove();
                updateChipList(chipValue, false); // Remove from chip list
            }
        }

        // Update chip list in the chipList array (adding/removing)
        function updateChipList(chipValue, isAdding) {
            // Trim the chip value to avoid issues with leading/trailing spaces


            let chipIndex = -1;  // Default to -1 (not found)

            // Use forEach to iterate and find the chip's index
            chipList.forEach((chip, index) => {
                console.log('chipValue >>', chipValue, 'chip >>', chip,);

                if (chip.trim() == chipValue) {

                    chipIndex = index;  // Set the index if found
                }
            });

            // If adding and chip is not already in the list
            if (isAdding && chipIndex === -1) {
                chipList.push(chipValue); // Add chip to list
            }

            // If removing and chip is found in the list
            if (!isAdding && chipIndex !== -1) {
                chipList.splice(chipIndex, 1); // Remove chip from list
            }
            console.log(chipList);

            // Update the hidden location input field with the current chip list
        }
        function updateLocationInput() {
            console.log(chipList)
            locationInput.value = chipList.join(",");  // Set the value as a comma-separated list of chips
        }

        // Update chip limit display
        function updateLimiter() {
            const limitLabel = document.querySelector(".chips_input > label > .limit");
            const currentCount = getChipCount();
            const remaining = chipLimit - currentCount;

            if (limitLabel) {
                limitLabel.textContent = `(${remaining}/${chipLimit})`;
                limitLabel.style.color = remaining === 0 ? "var(--invalid)" : "inherit";
            }
        }



        // Escape HTML to prevent injection
        function escapeHtml(unsafe) {
            return unsafe
                .replace(/&/g, "&amp;")
                .replace(/</g, "&lt;")
                .replace(/>/g, "&gt;")
                .replace(/"/g, "&quot;")
                .replace(/'/g, "&#039;");
        }

        // Populate chips from SelectedLocation after page reload
        const selectedLocation = "@Model.SelectedLocation";
        if (selectedLocation) {
            const locations = selectedLocation.split(",").map(location => location.trim());
            locations.forEach(location => {
                makeChip(location);
            });
        }


    });

</script>


@* <<<<<<<<<<<<<<<<<<<<<<save property section>>>>>>>>>>>>>>>>>>>> *@
<!-- Include jQuery (place it before any custom scripts that use jQuery) -->
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script>

    $(".save-icon").click(function () {
        var propertyId = $(this).data("property-id");
        var icon = $(this); // Store reference to the clicked icon

        // Send AJAX request to save/unsave the property
        $.ajax({
            url: '@Url.Action("SaveProperty", "Admin")', // Adjust the action and controller name
            type: 'POST',
            data: { propertyId: propertyId },
            success: function (response) {
                if (response.success) {
                    // Toggle between "heart" and "heart-fill" classes based on the saved/unsaved state
                    if (response.message.includes("Property saved successfully!")) {
                        console.log('icon-' + propertyId.toString())
                        document.getElementById('icon-' + propertyId.toString()).classList.remove('bi-heart')
                        document.getElementById('icon-' + propertyId.toString()).classList.add('bi-heart-fill')
                        icon.data("saved", "true");
                    } else {
                        document.getElementById('icon-' + propertyId.toString()).classList.remove('bi-heart-fill')  
                        document.getElementById('icon-' + propertyId.toString()).classList.add('bi-heart')

                        icon.css("color", "white"); 
                        icon.data("saved", "false");
                    }
                } 
            },
            error: function () {
                alert("An error occurred while saving or unsaving the property.");
            }
        });
    });

</script>
